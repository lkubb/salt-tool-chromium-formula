{#- get dict of user configurations -#}
{%- set chromium = salt['pillar.get']('tool:chromium', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{%- set version = chromium.get('version', 'latest') %}

{%- set package = salt['match.filter_by'](salt['grains.filter_by']({
  'Windows': {
    'latest': 'chromium',
    'ungoogled': 'ungoogled-chromium'
  },
  'Darwin': {
    'latest': 'homebrew/cask/chromium',
    'ungoogled': 'homebrew/cask/eloston-chromium'
  },
  'Linux': {
    'latest': 'chromium-browser',
    'ungoogled': 'ungoogled-chromium'
  }
  }, 'kernel'), minion_id=version) %}

{%- do chromium.update({'_package': package}) %}


{#- @TODO currently does not support custom XDG conf dir on Linux -#}
{%- set default_conf_dir = salt['grains.filter_by']({
  'Darwin': '/Library/Application Support/Chromium',
  'Linux': '/.config/chromium',
  'Windows': '/AppData/Local/Chromium/User Data'
  }, 'kernel')
-%}

{%- set linux_dir = 'ungoogled-chromium' if version == 'ungoogled' else 'chromium-browser' %}

{#- @TODO windows/rpm/bsd, probably C:/Program Files/Chromium or Program Files (x86). -#}
{%- set installation_path = salt['grains.filter_by']({
  'MacOS': '/Applications/Chromium.app',
  'Windows': 'C:/Program Files/Chromium',
  'RedHat': '/usr/lib64/' ~ linux_dir,
  'default': '/usr/lib/' ~ linux_dir
  }, 'os_family') %}

{%- set bin_path = salt['grains.filter_by']({
  'Darwin': installation_path ~ '/Contents/MacOS/Chromium',
  'Windows': installation_path ~ '/Chromium.exe',
  'Linux': '/usr/bin/' ~ linux_dir,
  }, 'kernel') %}

{%- do chromium.update({'_path': installation_path, '_bin': bin_path, 'version': version}) -%}

{# {%- import_yaml "tool-chromium/policies/files/policies.yml" as policies_default -%} #}
{%- load_yaml as extensions_default -%}
installation_mode: normal_installed
update_url: https://clients2.google.com/service/update2/crx
{%- endload -%}

{%- set extensions_default = salt['defaults.merge'](extensions_default, chromium.get('ext_defaults', {}), in_place=False) %}

{%- set policies = chromium.get('policies', {}) -%}

{#- needs ext_local_source defined. for vanilla Chromium, adding a temp folder
    to allowed sources complicates the flow. also, temp folders generated in this file
    change when imported from different files. could be solved with os-dependent
    mapstack and persistent dir -#}
{%- if 'ungoogled' == chromium.version and
        chromium.get('ext_chromium_web_store') %}

  {%- do chromium | append_dict_key_value('extensions', 'chromium-web-store') %}
  {%- do chromium | append_dict_key_value('defaults:flags', 'extension-mime-request-handling@2') %}
{%- endif %}

{%- if chromium.get('extensions') -%}
  {# parse extensions. allows to specify pre-defined extensions by name
     instead of looking up ID #}
  {%- set extensions_data = {} -%}
  {%- set local_extensions = {} -%}
  {%- set download_extensions = {} -%}
  {%- set download_extensions_tempdir = chromium.ext_local_source ~ '/downloaded' %}
  {%- for extension in chromium.extensions -%}
    {%- set extension_config = {} -%}
    {%- set local = False %}
    {%- if extension is mapping -%}
      {%- set extension_name = extension.keys() | list | first -%}
      {#- need to deepcopy because we might pop 'local' settings, which will seem to work, but
          will make imports not contain local extension settings -#}
      {%- set extension_config = salt['defaults.deepcopy'](extension[extension_name]) -%}
    {%- else -%}
      {%- set extension_name = extension -%}
    {%- endif -%}
    {%- import_yaml "tool-chromium/policies/extensions/" + extension_name + ".yml" as data -%}
    {%- if extension_config.get('local', False) -%}
      {%- do local_extensions.update({extension_name: {'id': data.keys() | first, 'v': extension_config.local_version}}) -%}
      {%- do extension_config.update({'update_url': 'file://' ~ chromium.ext_local_source ~ '/update'}) -%}
      {%- do extension_config.update({'override_update_url': True}) -%}
      {%- do extension_config.pop('local') -%}
      {%- do extension_config.pop('local_version') -%}
      {%- set local = True %}
    {%- endif -%}
    {%- set update_url = data[data.keys() | first].get('update_url', extensions_default.update_url) %}
    {#- On Mac/Win, Ungoogled Chromium (for all extensions) and Chromium (for extensions outside CWS)
        will not work with ExtensionSettings. Download them to provide semi-automatical installation. -#}
    {%- if not local and 'Linux' != grains['kernel'] and
          ('ungoogled' == version or
          'https://clients2.google.com/service/update2/crx' != update_url) %}
      {%- do download_extensions.update({extension_name: {'id': data.keys() | first, 'update_url': update_url}}) -%}
    {%- endif %}
    {#- Still keep them in ExtensionSettings. They need to be installed before policy application.
        Somehow, extensions that could not be installed during policy application will be
        blocked from manual installation after. This might only be the case for force_installed. -#}
    {%- set extension_default = salt['defaults.merge'](extensions_default, data[data.keys() | list | first], in_place=False) -%}
    {%- set extension_config = salt['defaults.merge'](extensions_default, extension_config, in_place=False) -%}
    {%- do data[data.keys() | list | first].update(extension_config) -%}
    {%- do extensions_data.update(data) -%}
  {%- endfor -%}
  {%- do chromium.update({'_local_extensions': local_extensions, '_download_extensions': download_extensions, '_download_extensions_tempdir': download_extensions_tempdir}) -%}
  {%- set policies = salt['defaults.merge'](policies, {'forced' if chromium.get('ext_forced', True) else 'recommended': {'ExtensionSettings': extensions_data}}, in_place=False) -%} {# for whatever reason, this does not work in_place #}
  {%- if local_extensions or download_extensions %}
    {%- do policies | append_dict_key_value('forced:ExtensionInstallSources', 'file://{}/*'.format(chromium.ext_local_source)) %}
  {%- endif %}
{%- endif -%}

{#- https://support.google.com/chrome/a/answer/7532015 -#}
{%- if policies and 'Windows' == grains['kernel'] %}
  {%- if policies | traverse("recommended:ExtensionSettings") %}
    {%- do policies.recommended.update({'ExtensionSettings': policies.recommended.ExtensionSettings | json}) %}
  {%- endif %}
  {%- if policies | traverse("forced:ExtensionSettings") %}
    {%- do policies.forced.update({'ExtensionSettings': policies.forced.ExtensionSettings | json}) %}
  {%- endif %}
{%- endif %}

{%- do chromium.update({'_policies': policies}) -%}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('chromium', True) -%}
    {%- do users.update({tool_user: tool_user_conf}) -%}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, chromium.get('users', {})) -%}

{#- update all user configuration for chromium with its defaults -#}
{%- do salt['defaults.update'](users, {'chromium': chromium.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_chromium': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}
  {%- do users[user]['_chromium'].update({'confdir': user_info.home ~ default_conf_dir}) -%}
{%- endfor -%}

{%- do chromium.update({'users': users.values() | list}) -%}
